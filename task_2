"""
2. Отсортируйте по возрастанию методом слияния одномерный вещественный массив,
заданный случайными числами на промежутке [0; 50). Выведите на экран исходный
и отсортированный массивы.

Пример:
Введите число элементов: 5
Исходный - [46.11436617832828, 41.62921998361278, 18.45859540989644, 12.128870723745806, 8.025098788570562]
Отсортированный - [8.025098788570562, 12.128870723745806, 18.45859540989644, 41.62921998361278, 46.11436617832828]
"""
import random
import timeit


def merge_sort(lst_obj):
    if len(lst_obj) > 1:
        center = len(lst_obj) // 2
        left = lst_obj[:center]
        right = lst_obj[center:]
        merge_sort(left)
        merge_sort(right)
        i, j, k = 0, 0, 0

        while i < len(left) and j < len(right):
            if left[i] < right[j]:
                lst_obj[k] = left[i]
                i += 1
            else:
                lst_obj[k] = right[j]
                j += 1
            k += 1

        while i < len(left):
            lst_obj[k] = left[i]
            i += 1
            k += 1

        while j < len(right):
            lst_obj[k] = right[j]
            j += 1
            k += 1
        return lst_obj


num = int(input('Введите число элементов: '))
my_list = [random.random()*50 for i in range(num)]
print(my_list)
print(merge_sort(my_list))
"""
[20.799367788282908, 31.842832784390662, 29.339842839117114, 26.611916057118457, 26.43823068236361]
[20.799367788282908, 26.43823068236361, 26.611916057118457, 29.339842839117114, 31.842832784390662]
"""

print(timeit.timeit("merge_sort(my_list)", setup="from __main__ import merge_sort, my_list", number=100))
"""
10      0.0029762999999998208
100     0.032817499999999944
1000    0.4059193999999997

Вывод: Скорость у алгоритма сортировки слиянием выше, так как в слиянии сложность О(n log n).
"""
