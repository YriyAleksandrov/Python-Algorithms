"""
Задание 5.
Задание на закрепление навыков работы со стеком

Примечание: в этом задании вспомните ваши знания по работе с ООП
и опирайтесь на пример урока

Реализуйте структуру "стопка тарелок".

Мы можем складывать тарелки в стопку и при превышении некоторого значения
нужно начать складывать тарелки в новую стопку.

Структура должна предусматривать наличие нескольких стеков.
Создание нового стека происходит при достижении предыдущим стеком порогового значения.
Реализуйте по аналогии с примером, рассмотренным на уроке, необходимые методы,
для реализации это структуры, добавьте новые методы (не рассмотренные в примере с урока)
для реализации этой задачи.

После реализации структуры, проверьте ее работу на различных сценариях
"""


class PlateStackClass:
    def __init__(self, max_size):
        self.elems = [[]]
        self.max_size = max_size

    def __str__(self):
        return str(self.elems)

    def push_in(self, el):
        if len(self.elems[len(self.elems)-1]) < self.max_size:
            self.elems[len(self.elems)-1].append(el)
        else:
            self.elems.append([])
            self.elems[len(self.elems)-1].append(el)

    def pop_out(self):
        result = self.elems[len(self.elems)-1].pop()
        if len(self.elems[len(self.elems)-1]) == 0:
            self.elems.pop()
        return result

    def pop_out_stacks(self):
        last_elem_stacks = []
        for full_stack in self.elems:
            last_elem_stacks.append(full_stack.pop())
        return last_elem_stacks

    def get_val(self):
        return self.elems[-1][-1]

    def stack(self):
        last_elem_stack = []
        for full_stack in self.elems:
            last_elem_stack.append(full_stack[-1])
        return last_elem_stack

    def stack_size(self):
        elem_sum = 0
        for stack in self.elems:
            elem_sum += len(stack)
        return elem_sum

    def stack_count(self):
        return len(self.elems)


if __name__ == '__main__':
    plates = PlateStackClass(3)
    plates.push_in('Plate1')
    plates.push_in('Plate2')
    plates.push_in('Plate3')
    plates.push_in('Plate4')
    plates.push_in('Plate5')
    plates.push_in('Plate6')
    plates.push_in('Plate7')
    plates.push_in('Plate8')
    plates.push_in('Plate9')
    plates.push_in('Plate10')
    print(f'{plates} - начальные стеки тарелок')
    print(f'{plates.pop_out()} - забираем верхнюю тарелку последнего стека')
    print(f'{plates.get_val()} - узнаем какая тарелка последняя в последнем стеке')
    print(f'{plates.stack()} - узнаем какая тарелка последняя в каждом из стеков')
    print(f'{plates.stack_size()} - узнаем общее кол-во тарелок')
    print(f'{plates.stack_count()} - узнаем кол-во стеков')
    print(f'{plates} - стеки тарелок')
    print(f'{plates.pop_out_stacks()} - забираем верхнюю тарелку с каждого из стеков')
    print(f'{plates.get_val()} - узнаем какая тарелка последняя в последнем стеке')
    print(f'{plates} - получившиеся стеки тарелок')
