"""
Задание 4.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""

# 1 Сложность: O(n**2)

def registration():
    user_name = input('Введите имя пользователя: ')                                             # O(1)
    user_pass = input('Введите пароль пользователя: ')                                          # O(1)
    system_BD[user_name] = user_pass                                                            # O(1)
    return system_BD                                                                            # O(1)


def authentications():
    for i in system_BD.items():                                                                 # O(n)
        if [i] == list(user.items()):                                                           # O(n)
            return print('Completed... вы допущены к ресурсу')                                  # O(1)
        elif [i] != list(user.items()):                                                         # O(n)
            continue                                                                            # O(1)
    if input('Доступ ограничен. Хотите пройти активацию учетной записи? y/n: ') == 'y':         # O(1)
        registration()                                                                          # O(1)
        authentications()                                                                       # O(n**2)


system_BD = {'Admin': 'Admin1234'}                                                              # O(1)
user = {input('Введите логин: '): input('введите пароль: ')}                                    # O(1)
authentications()                                                                               # O(1)


# 2 Сложность: O(n)

def authentications_2(card):                                                                    # O(1)
    for k, v in card.items():                                                                   # O(n)
        if k == 'User1' and v == 'qwerty123':                                                   # O(1)
            print('Введены корректные данные')                                                  # O(1)
        elif k == 'Activation' and v == 'on':                                                   # O(1)
            print('Аккаунт активен. Вы допущены к ресурсу.')                                    # O(1)
        elif k == 'Activation' and v == 'off':                                                  # O(1)
            print('Аккаунт не активен. Пройдите активацию.')                                    # O(1)


user_card = {'User1': 'qwerty123', 'Activation': 'on'}                                          # O(1)
authentications_2(user_card)                                                                    # O(1)

user_card = {'User1': 'qwerty123', 'Activation': 'off'}                                         # O(1)
authentications_2(user_card)                                                                    # O(1)

"""
Второй вариант лучше так как мы не создаем список внутри цикла, 
а просто сравниваем значения.
"""